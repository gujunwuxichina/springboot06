package com.gujun.springboot06;

public class HighConcurrencyDeal {

    /*
        高并发开发：
        为了克服高并发所带来的超发问题，提出了乐观锁、悲观锁、使用Redis等解决方案；

     */

    /*
        悲观锁：
        超发问题根本在于共享的数据被多个线程所修改，无法保证其执行顺序，从而出错；
        如果一个数据库事务读取到产品后，就将数据锁定，不允许别的线程进行读写操作，直至当前数据库事务完成才释放锁，就不会出现超发问题；
        做法很简单，只需在查询共享数据的sql中最后加上 for update即可；
        因为并发的数据库事务要等待释放锁才会执行，所以性能上会损失；
     */

    /*
        乐观锁：
        是一种不使用数据库锁和不阻塞线程并发的方案；
     */

}
